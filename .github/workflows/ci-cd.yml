name: CI/CD Overkill Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Dependencies (Backend)
        working-directory: ./backend
        run: npm install

      - name: Run ESLint (Backend)
        working-directory: ./backend
        run: npm run lint

      # - name: Install Dependencies (Frontend)
      #   working-directory: ./frontend
      #   run: npm install

      # - name: Run ESLint (Frontend)
      #   working-directory: ./frontend
      #   run: npm run lint

  discord:
    name: üì¢ Notify Discord
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Check build status and notify Discord
        env:
          DISCORD_WEBHOOK: https://discord.com/api/webhooks/1303658916260872213/ok3NDEaJNpsKYNMbp7wH4k9SV1-akCHIgTJkqzmfgz-GWsHnDskGGV_YgS_qvMeucm7z
        run: |
          curl -H "Content-Type: application/json" -d '{
            "embeds": [{
              "title": "Build Succeeded! :white_check_mark:",
              "color": 65280,
              "description": "A new awesome update has been deployed!\\n\\n
              ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñÑ‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñÑ‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë\\n
              ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë"
            }]
          }' $DISCORD_WEBHOOK


  # test:
  #   name: üß™ Run Unit & E2E Tests
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: testuser
  #         POSTGRES_PASSWORD: testpassword
  #         POSTGRES_DB: testdb
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

#   docker_build:
#     name: üê≥ Build & Push Docker Images
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Backend Docker Image
#         run: docker build -t my-app-backend ./backend

#       - name: Build Frontend Docker Image
#         run: docker build -t my-app-frontend ./frontend

#       - name: Push Backend Image
#         run: docker push my-app-backend

#       - name: Push Frontend Image
#         run: docker push my-app-frontend

#   deploy:
#     name: üöÄ Deploy to Production Server
#     runs-on: ubuntu-latest
#     needs: docker_build
#     steps:
#       - name: Setup SSH Connection
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             cd /path/to/deployment
#             docker-compose down
#             docker-compose pull
#             docker-compose up -d

#   security:
#     name: üîí Security Analysis
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Run Snyk to check vulnerabilities
#         uses: snyk/actions@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#       - name: Enable Dependabot Alerts
#         uses: dependabot/fetch-metadata@v1
